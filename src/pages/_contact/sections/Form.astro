---
import { getAbsoluteLocaleUrl } from 'astro:i18n'
import Trans, { t } from '../../../i18n/utils.astro'
import HeroSection from './Hero.astro'
import SectionComponent from '../../../components/Section.astro'
import MessageComponent from '../../../components/Message.astro'
import InputComponent from '../../../components/Input.astro'
import SpinnerComponent from '../../../components/Spinner.astro'

export const prerender = false

const {
  lang='',
  fields=[]
} = Astro.props

let formValid=true, result=null, recaptcha=''

const handleFormSubmit = async () => {

  const href = getAbsoluteLocaleUrl(lang,'api/sendEmail')
  const params = {}

  Object.keys(fields).map((key) => {
    params[ fields[key].name ] = fields[key].value
  })

  return await fetch(href, {
    'method': 'POST',
    'headers': {'Content-Type':'application/json'},
    'body': JSON.stringify(params)
  })
  .then((response) => {
    return (response.status===200) ? true : false
  })
  .catch((error) => {
    return false
  })
}

const handleValidateForm = (recaptcha) => {
  const valids = Object.keys(fields)
    .map((key) => fields[key].valid===true && fields[key].value!=='')
    .filter((valid) => valid===false)
  return (recaptcha.length>0 || valids.length>0) ? false : true
}

/*
// https://github.com/withastro/astro/issues/11247
if (Astro.request.method === 'POST') {
  try {

    const data  = await Astro.request.formData()
    recaptcha   = data.get('recaptcha')?.toString().trim()

    Object.keys(fields).map((key) => {
      fields[key].value     = data.get(fields[key].name)?.toString().trim()
      fields[key].valid     = fields[key].value != ''
      fields[key].feedback  = fields[key].valid ? '' : ''
    })

    formValid = handleValidateForm(recaptcha)
    if (formValid) {
      result = await handleFormSubmit()
    }

  } catch (error) {
    result = false
    console.error('Form.catch', error?.message)
  }
}
*/
---

<SectionComponent className="top hero d-flex align-items-center full">
  <div class="container">
    <div class="row">
      {result===null ? (
        <>
          <HeroSection />
          <div class="col-12 col-lg-7 col-form-contacto">
            <form 
              method="POST"
              id="form-contact" 
              name="form-contact" 
              aria-label={t(lang,'pagesContact:form-label')}
              novalidate="novalidate"
            >
              <fieldset id="form" class="area-form">
                <article class="form-article">
                  {Object.keys(fields).map((key) => (
                    <InputComponent
                      input={fields[key]}
                      label={t(lang,fields[key].label)}
                      feedback={t(lang,fields[key].feedback)}
                      placeHolder={t(lang, fields[key].placeholder)}
                      required={true}
                    />
                  ))}
                </article>
              </fieldset>
              <div class="row align-items-end">
                <div class="col">
                  <input type="hidden" name="recaptcha" value="" />
                </div>
                <div class="col">
                  <div class="wrapper-input col-boton-enviar">
                    <button
                      id="button-contact"
                      class="btn btn-warning uppercase d-inline" 
                      type="submit" 
                      {/* disabled={!formValid} */}
                    >
                      <SpinnerComponent id='contact-spinner' size='sm' />
                      {t(lang,'pagesContact:form-button')}
                    </button>
                  </div>
                </div>
              </div>
            </form>
          </div>
        </>
      ) : (
        <MessageComponent
          className='col-6 mx-auto div_res_contacto'
          title={true}
        >
          <Trans slot='title' i18nKey='pagesContact:messageTitle' />
          <Trans slot='message' i18nKey={result===true ? 'pagesContact:messageSuccess' : 'pagesContact:messageError'} />
        </MessageComponent>
      )}
    </div>
  </div>
</SectionComponent>

<script>

  function SubmitListener(form) {
    form.addEventListener('submit', function(event) {
      var isValid = true;
      var spinner = document.getElementById('contact-spinner');
      var fields  = this.querySelectorAll('[required="true"]');

      spinner.classList.remove('d-none');
      fields.forEach(function(field) {

        if (!field.validity.valid) {
          field.classList.add('valid');
          field.classList.remove('invalid');
        } else {
          field.classList.remove('valid');
          field.classList.add('invalid');
        }

        isValid = (!field.validity.valid) ? false : isValid;
      });
      // console.log('isValid', isValid);spinner.classList.add('d-none');event.preventDefault();return false;

      if (isValid) {
        window.setTimeout(function() {
          return event;
        }, 1000);
      } else {
        event.preventDefault();
        spinner.classList.add('d-none');
        return false;
      }
    });
  }

  function EmailListener() {
    const email = document.getElementById('input-email');
    email.addEventListener('input', function(event) {
      email.setCustomValidity('');
      const emailRegExp = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+.[A-Z]{2,4}$/i;
 
      if (email.validity.valid && emailRegExp.test(email.value)) {
        email.setCustomValidity('');
        email.classList.add('valid');
        email.classList.remove('invalid');
      } else {
        email.setCustomValidity('error');
        email.classList.remove('valid');
        email.classList.add('invalid');
      }

    });
  }

  const form = document.getElementById('form-contact');
  if (typeof(form) !== 'undefined' && form !== null) {
    SubmitListener(form);
    EmailListener();
  }
</script>
